import{_ as n,c as s,o as a,a as t}from"./app-6OSm1jrO.js";const e={},o=t(`<h1 id="mock服务" tabindex="-1"><a class="header-anchor" href="#mock服务"><span>Mock服务</span></a></h1><p>在ram模式下，可以启动mock服务：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">npm</span> run mock
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>启动的服务端口可在全局配置中修改 <code>MOCK_PORT</code>。</p><p>为了模拟苍穹平台主动推送信息的能力，ram模式默认采用 Axios 的方式收发数据，你也可以通过修改全局配置中的 <code>DEV_RAM_REQUEST_TYPE</code> 变量来决定请求使用的是 Axios 还是 Socket 方式。<code>axios</code> 为 Axios 模式，<code>socket</code> 为 Websocket 模式。</p><p>一般情况下后端会在控件初始化的时候推送 <code>init</code> 事件，所以第一次 <code>init</code> 生命周期数据的主动推送永远用的是 <code>Socket</code> 方式触发。</p><p>不过具体还是要看后端怎么写的，如果后端没推动 <code>init</code> 事件，那么可以修改这里的代码不主动触发 <code>init</code> 事件 <code>src/devSocket.ts</code>：</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> InitComponent <span class="token operator">=</span> InitComponentSingleton<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>isInitData<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  InitComponent<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
  InitComponent<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>isInitData<span class="token punctuation">)</span> <span class="token keyword">this</span><span class="token punctuation">.</span>isInitData <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>换成</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> InitComponent <span class="token operator">=</span> InitComponentSingleton<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
InitComponent<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>在 <code>serverMock.js</code> 中注释 <code>socket.emit(&quot;message&quot;, initMock);</code> 。</p><p>这里演示项目是模拟后端在控件初始化的时候主动推动 <code>init</code> 和 <code>update</code> 事件，所以执行了两次 <code>socket.emit(&quot;message&quot;, initMock);</code> 。根据自己的实际情况来修改。</p><h2 id="数据伪造" tabindex="-1"><a class="header-anchor" href="#数据伪造"><span>数据伪造</span></a></h2><p>基本上伪造数据只需要在 <code>/mock</code> 文件夹中修改即可。</p>`,14),c=[o];function p(i,l){return a(),s("div",null,c)}const u=n(e,[["render",p],["__file","mock.html.vue"]]),k=JSON.parse('{"path":"/promise/mock.html","title":"Mock服务","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"数据伪造","slug":"数据伪造","link":"#数据伪造","children":[]}],"git":{"updatedTime":null,"contributors":[]},"filePathRelative":"promise/mock.md"}');export{u as comp,k as data};
