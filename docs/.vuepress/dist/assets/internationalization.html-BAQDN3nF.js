import{_ as s,c as a,a as t,o as e}from"./app-D9U6wW6q.js";const p={};function o(c,n){return e(),a("div",null,n[0]||(n[0]=[t(`<h1 id="国际化多语言方案" tabindex="-1"><a class="header-anchor" href="#国际化多语言方案"><span>国际化多语言方案</span></a></h1><p>生产环境的国际化方案采用的是社区提供的方法：<a href="https://vip.kingdee.com/school/detail/238388113520005120?productLineId=29&amp;lang=zh-CN" target="_blank" rel="noopener noreferrer">自定义控件的多语言开发</a></p><p>主要利用的 API 为 <code>window.KDApi.getLangMsg</code></p><p>但是开发环境没有这个 API，于是做了一层封装来模拟行为，使用例子：</p><div class="language-jsx line-numbers-mode" data-highlighter="prismjs" data-ext="jsx"><pre><code><span class="line"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> useContext<span class="token punctuation">,</span> useState <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> AppContext <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@/components/index&#39;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> <span class="token literal-property property">App</span><span class="token operator">:</span> React<span class="token punctuation">.</span><span class="token function-variable function">FC</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">const</span> <span class="token punctuation">{</span> getLangMsg <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useContext</span><span class="token punctuation">(</span>AppContext<span class="token punctuation">)</span> <span class="token comment">// getLangMsg 的用法完全和 window.KDApi.getLangMsg 一致</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="line">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span><span class="token function">getLangMsg</span><span class="token punctuation">(</span><span class="token string">&#39;lang&#39;</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>国际化文本维护在 <code>src/lang</code> 文件夹中。</p><p>如果不需要国际化，那就不使用这个 API，并且在 <code>index.ts</code> 中注册控件时取消多语言配置 <code>{ isMulLang: true }</code></p>`,7)]))}const l=s(p,[["render",o]]),r=JSON.parse('{"path":"/react/internationalization.html","title":"国际化多语言方案","lang":"zh-CN","frontmatter":{},"headers":[],"git":{"updatedTime":1719562843000,"contributors":[{"name":"庞囧","username":"","email":"980100681@qq.com","commits":1}],"changelog":[{"hash":"5a6f79f8bc2f3f667103f98b6706facad79f9a3d","time":1719562843000,"email":"980100681@qq.com","author":"庞囧","message":"doc：修改文档内容"}]},"filePathRelative":"react/internationalization.md"}');export{l as comp,r as data};
