import{_ as t,c as i,a as l,o as a}from"./app-2CHEVcr4.js";const n={};function r(s,e){return a(),i("div",null,e[0]||(e[0]=[l('<h1 id="eslint-代码格式校验方案选择" tabindex="-1"><a class="header-anchor" href="#eslint-代码格式校验方案选择"><span>ESlint 代码格式校验方案选择</span></a></h1><p>在使用脚手架创建工程的时候可以选择是否加入 Eslint 帮忙格式化代码。</p><p><strong>为什么不用主流的 ESlint + Prettier 方案？</strong></p><p>以下是我的理由：</p><p>第一、配置繁琐，在一个 React 或者 Vue 工程中加入一套适配的 ESlint + Prettier 方案过程很麻烦，需要安装各种依赖，配置各种规则和文件，并且需要保证 ESlint 和 Prettier 版本一致，规则不冲突。</p><p>第二、Prettier 格式化有时候弄巧成拙，格式化后的样子可能更不适合阅读。</p><p>第三、我不想在一个起步工程中加入太多耦合度太高的插件，我希望工程尽可能的简单。</p><p>于是我就在网上找到了一个不错的方案：<a href="https://github.com/antfu/eslint-config" target="_blank" rel="noopener noreferrer">@antfu/eslint-config</a></p><h2 id="antfu" tabindex="-1"><a class="header-anchor" href="#antfu"><span>antfu</span></a></h2><p>作者为 + Prettier 方案不足之处写了一篇文章：<a href="https://antfu.me/posts/why-not-prettier-zh" target="_blank" rel="noopener noreferrer">为什么我不使用 Prettier (antfu.me)</a>。</p><p>文章要点总结如下：</p><ul><li>自定义的配置并不是很丰富，这是 Prettier 设计者为了保证所有用户的风格一致化的理念。</li><li>强制换行和行合并功能有时候反而不合适阅读</li><li>与 ESlint 有许多规则冲突</li></ul><p>最后作者的观点如下：</p><ol><li>只单纯使用 Prettier 十分合理 - 开箱即用是个很棒的功能</li><li>如果你需要使用 ESLint，它也可以像 Prettier 一样格式化代码 - 而且更加可配置</li><li>Prettier + ESLint 仍然需要大量的配置 - 它并没有让你的工作变得更简单</li><li>你可以在 ESLint 中完全控制代码风格，但在 Prettier 中却无法做到，这两者混合在一起感觉很奇怪</li><li>我不认为 Parse 两次代码会更快</li></ol><p><strong>antfu 就是一个集成了多种规则的 ESlint 插件，配置简单，高效，可格式化。所以起步工程集成了这个方案。</strong></p><h3 id="css-和-html的格式化" tabindex="-1"><a class="header-anchor" href="#css-和-html的格式化"><span>CSS 和 HTML的格式化</span></a></h3><p>ESlint 是不支持 CSS 和 HTML 格式化的，要么这种格式的文件用其他格式化工具单独处理，起步工程用了 <code>eslint-plugin-format</code> 来处理。</p><h3 id="一些坑的提示" tabindex="-1"><a class="header-anchor" href="#一些坑的提示"><span>一些坑的提示</span></a></h3><ul><li><p>如果在内网 eslint 格式化不生效，可以在 vscode 插件里看看 eslint 是不是被突然禁用了，重新启用试试。</p></li><li><p>如果项目中的代码风格最后总是被 vscode 强制覆盖（例如 Organize imports ），如果能关掉就好，不能就重新安装一个 vscode 。</p></li></ul><h1 id="kingdee-cosmic-cli-lint" tabindex="-1"><a class="header-anchor" href="#kingdee-cosmic-cli-lint"><span>kingdee-cosmic-cli-lint</span></a></h1><p>在使用了 antfu 的同时，我还开发了一个自定义规则插件，用来辅助补充规则的，例如：</p><ul><li><p>颗粒度更加细致的 import 导入顺序校验 （待完善）</p></li><li><p>变量名称命名校验</p></li><li><p>React 函数组件内部函数定义之间空一行的校验</p></li></ul>',22)]))}const c=t(n,[["render",r]]),o=JSON.parse('{"path":"/rule/introduce.html","title":"ESlint 代码格式校验方案选择","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"antfu","slug":"antfu","link":"#antfu","children":[{"level":3,"title":"CSS 和 HTML的格式化","slug":"css-和-html的格式化","link":"#css-和-html的格式化","children":[]},{"level":3,"title":"一些坑的提示","slug":"一些坑的提示","link":"#一些坑的提示","children":[]}]}],"git":{"updatedTime":1719455711000,"contributors":[{"name":"庞囧","username":"","email":"980100681@qq.com","commits":2}],"changelog":[{"hash":"f61b234d6dbf332eebe27136e73cbf53d1846445","time":1719455711000,"email":"980100681@qq.com","author":"庞囧","message":"doc：修改文档内容"},{"hash":"47888768f4a77fe3de5f7afe73ae56a99328cc39","time":1716542879000,"email":"980100681@qq.com","author":"庞囧","message":"fix: package.json"}]},"filePathRelative":"rule/introduce.md"}');export{c as comp,o as data};
